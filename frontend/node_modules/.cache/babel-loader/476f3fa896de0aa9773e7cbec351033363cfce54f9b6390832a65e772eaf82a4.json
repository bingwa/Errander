{"ast":null,"code":"// frontend/src/services/taskService.js\nimport axios from 'axios';\nconst API_URL = 'http://localhost:5000/api/tasks';\nconst taskService = {\n  createTask: (data, token) => axios.post(API_URL, data, {\n    headers: {\n      'x-auth-token': token\n    }\n  }),\n  // NOTE: This function was updated to pass only the token, as the backend now gets the erranderId from the JWT.\n  assignTask: (taskId, token) => {\n    return axios.put(`${API_URL}/assign/${taskId}`, null, {\n      headers: {\n        'x-auth-token': token\n      }\n    });\n  },\n  getAssignedTasks: token => axios.get(`${API_URL}/assigned`, {\n    headers: {\n      'x-auth-token': token\n    }\n  }),\n  updateTaskStatus: (taskId, status, token) => axios.put(`${API_URL}/status/${taskId}`, {\n    status\n  }, {\n    headers: {\n      'x-auth-token': token\n    }\n  }),\n  getTaskDetails: (taskId, token) => axios.get(`${API_URL}/${taskId}`, {\n    headers: {\n      'x-auth-token': token\n    }\n  }),\n  getUserTasks: token => axios.get(`${API_URL}/user/history`, {\n    headers: {\n      'x-auth-token': token\n    }\n  }),\n  rateTask: (taskId, ratingData, token) => axios.put(`${API_URL}/rate/${taskId}`, ratingData, {\n    headers: {\n      'x-auth-token': token\n    }\n  }),\n  getPendingTasks: token => axios.get(`${API_URL}/pending`, {\n    headers: {\n      'x-auth-token': token\n    }\n  }),\n  getPaymentHistory: token => axios.get(`${API_URL}/payment-history`, {\n    headers: {\n      'x-auth-token': token\n    }\n  }),\n  checkoutTask: (taskId, token) => axios.put(`${API_URL}/checkout/${taskId}`, null, {\n    headers: {\n      'x-auth-token': token\n    }\n  }),\n  // --- NEW FUNCTION ---\n  cancelTask: (taskId, token) => {\n    return axios.put(`${API_URL}/cancel/${taskId}`, null, {\n      headers: {\n        'x-auth-token': token\n      }\n    });\n  }\n};\nexport default taskService;","map":{"version":3,"names":["axios","API_URL","taskService","createTask","data","token","post","headers","assignTask","taskId","put","getAssignedTasks","get","updateTaskStatus","status","getTaskDetails","getUserTasks","rateTask","ratingData","getPendingTasks","getPaymentHistory","checkoutTask","cancelTask"],"sources":["C:/Users/user/Desktop/Errand/frontend/src/services/taskService.js"],"sourcesContent":["// frontend/src/services/taskService.js\r\nimport axios from 'axios';\r\nconst API_URL = 'http://localhost:5000/api/tasks';\r\n\r\nconst taskService = {\r\n    createTask: (data, token) => axios.post(API_URL, data, { headers: { 'x-auth-token': token } }),\r\n    \r\n    // NOTE: This function was updated to pass only the token, as the backend now gets the erranderId from the JWT.\r\n    assignTask: (taskId, token) => {\r\n        return axios.put(`${API_URL}/assign/${taskId}`, null, { headers: { 'x-auth-token': token } });\r\n    },\r\n    \r\n    getAssignedTasks: (token) => axios.get(`${API_URL}/assigned`, { headers: { 'x-auth-token': token } }),\r\n    \r\n    updateTaskStatus: (taskId, status, token) => axios.put(`${API_URL}/status/${taskId}`, { status }, { headers: { 'x-auth-token': token } }),\r\n    \r\n    getTaskDetails: (taskId, token) => axios.get(`${API_URL}/${taskId}`, { headers: { 'x-auth-token': token } }),\r\n    \r\n    getUserTasks: (token) => axios.get(`${API_URL}/user/history`, { headers: { 'x-auth-token': token } }),\r\n    \r\n    rateTask: (taskId, ratingData, token) => axios.put(`${API_URL}/rate/${taskId}`, ratingData, { headers: { 'x-auth-token': token } }),\r\n    \r\n    getPendingTasks: (token) => axios.get(`${API_URL}/pending`, { headers: { 'x-auth-token': token } }),\r\n    \r\n    getPaymentHistory: (token) => axios.get(`${API_URL}/payment-history`, { headers: { 'x-auth-token': token } }),\r\n    \r\n    checkoutTask: (taskId, token) => axios.put(`${API_URL}/checkout/${taskId}`, null, { headers: { 'x-auth-token': token } }),\r\n\r\n    // --- NEW FUNCTION ---\r\n    cancelTask: (taskId, token) => {\r\n        return axios.put(`${API_URL}/cancel/${taskId}`, null, { headers: { 'x-auth-token': token } });\r\n    }\r\n};\r\n\r\nexport default taskService;\r\n"],"mappings":"AAAA;AACA,OAAOA,KAAK,MAAM,OAAO;AACzB,MAAMC,OAAO,GAAG,iCAAiC;AAEjD,MAAMC,WAAW,GAAG;EAChBC,UAAU,EAAEA,CAACC,IAAI,EAAEC,KAAK,KAAKL,KAAK,CAACM,IAAI,CAACL,OAAO,EAAEG,IAAI,EAAE;IAAEG,OAAO,EAAE;MAAE,cAAc,EAAEF;IAAM;EAAE,CAAC,CAAC;EAE9F;EACAG,UAAU,EAAEA,CAACC,MAAM,EAAEJ,KAAK,KAAK;IAC3B,OAAOL,KAAK,CAACU,GAAG,CAAC,GAAGT,OAAO,WAAWQ,MAAM,EAAE,EAAE,IAAI,EAAE;MAAEF,OAAO,EAAE;QAAE,cAAc,EAAEF;MAAM;IAAE,CAAC,CAAC;EACjG,CAAC;EAEDM,gBAAgB,EAAGN,KAAK,IAAKL,KAAK,CAACY,GAAG,CAAC,GAAGX,OAAO,WAAW,EAAE;IAAEM,OAAO,EAAE;MAAE,cAAc,EAAEF;IAAM;EAAE,CAAC,CAAC;EAErGQ,gBAAgB,EAAEA,CAACJ,MAAM,EAAEK,MAAM,EAAET,KAAK,KAAKL,KAAK,CAACU,GAAG,CAAC,GAAGT,OAAO,WAAWQ,MAAM,EAAE,EAAE;IAAEK;EAAO,CAAC,EAAE;IAAEP,OAAO,EAAE;MAAE,cAAc,EAAEF;IAAM;EAAE,CAAC,CAAC;EAEzIU,cAAc,EAAEA,CAACN,MAAM,EAAEJ,KAAK,KAAKL,KAAK,CAACY,GAAG,CAAC,GAAGX,OAAO,IAAIQ,MAAM,EAAE,EAAE;IAAEF,OAAO,EAAE;MAAE,cAAc,EAAEF;IAAM;EAAE,CAAC,CAAC;EAE5GW,YAAY,EAAGX,KAAK,IAAKL,KAAK,CAACY,GAAG,CAAC,GAAGX,OAAO,eAAe,EAAE;IAAEM,OAAO,EAAE;MAAE,cAAc,EAAEF;IAAM;EAAE,CAAC,CAAC;EAErGY,QAAQ,EAAEA,CAACR,MAAM,EAAES,UAAU,EAAEb,KAAK,KAAKL,KAAK,CAACU,GAAG,CAAC,GAAGT,OAAO,SAASQ,MAAM,EAAE,EAAES,UAAU,EAAE;IAAEX,OAAO,EAAE;MAAE,cAAc,EAAEF;IAAM;EAAE,CAAC,CAAC;EAEnIc,eAAe,EAAGd,KAAK,IAAKL,KAAK,CAACY,GAAG,CAAC,GAAGX,OAAO,UAAU,EAAE;IAAEM,OAAO,EAAE;MAAE,cAAc,EAAEF;IAAM;EAAE,CAAC,CAAC;EAEnGe,iBAAiB,EAAGf,KAAK,IAAKL,KAAK,CAACY,GAAG,CAAC,GAAGX,OAAO,kBAAkB,EAAE;IAAEM,OAAO,EAAE;MAAE,cAAc,EAAEF;IAAM;EAAE,CAAC,CAAC;EAE7GgB,YAAY,EAAEA,CAACZ,MAAM,EAAEJ,KAAK,KAAKL,KAAK,CAACU,GAAG,CAAC,GAAGT,OAAO,aAAaQ,MAAM,EAAE,EAAE,IAAI,EAAE;IAAEF,OAAO,EAAE;MAAE,cAAc,EAAEF;IAAM;EAAE,CAAC,CAAC;EAEzH;EACAiB,UAAU,EAAEA,CAACb,MAAM,EAAEJ,KAAK,KAAK;IAC3B,OAAOL,KAAK,CAACU,GAAG,CAAC,GAAGT,OAAO,WAAWQ,MAAM,EAAE,EAAE,IAAI,EAAE;MAAEF,OAAO,EAAE;QAAE,cAAc,EAAEF;MAAM;IAAE,CAAC,CAAC;EACjG;AACJ,CAAC;AAED,eAAeH,WAAW","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}