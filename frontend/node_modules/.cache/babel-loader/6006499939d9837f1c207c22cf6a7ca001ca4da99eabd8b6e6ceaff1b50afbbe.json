{"ast":null,"code":"import axios from 'axios';\n\n// Get the API URL from environment variables, with a fallback for local development\nconst API_URL = 'http://localhost:5000/api';\n\n// Create an instance of axios for making API requests\nconst api = axios.create({\n  baseURL: API_URL,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n/**\r\n * A service object for handling API requests related to applications.\r\n */\nconst applicationService = {\n  /**\r\n   * Fetches all applications from the backend.\r\n   * @returns {Promise<Object>} A promise that resolves to the API response.\r\n   */\n  getApplications: () => {\n    // This assumes an endpoint like /api/applications exists on your server\n    return api.get('/applications');\n  },\n  /**\r\n   * Approves an application by its ID.\r\n   * @param {string} id - The ID of the application to approve.\r\n   * @returns {Promise<Object>} A promise that resolves to the API response.\r\n   */\n  approveApplication: id => {\n    return api.patch(`/applications/${id}/approve`);\n  },\n  /**\r\n   * Rejects an application by its ID.\r\n   * @param {string} id - The ID of the application to reject.\r\n   * @returns {Promise<Object>} A promise that resolves to the API response.\r\n   */\n  rejectApplication: id => {\n    return api.patch(`/applications/${id}/reject`);\n  }\n};\nexport default applicationService;","map":{"version":3,"names":["axios","API_URL","api","create","baseURL","headers","applicationService","getApplications","get","approveApplication","id","patch","rejectApplication"],"sources":["C:/Users/user/Desktop/Errand/frontend/src/services/applicationService.js"],"sourcesContent":["import axios from 'axios';\r\n\r\n// Get the API URL from environment variables, with a fallback for local development\r\nconst API_URL = 'http://localhost:5000/api';\r\n\r\n// Create an instance of axios for making API requests\r\nconst api = axios.create({\r\n    baseURL: API_URL,\r\n    headers: {\r\n        'Content-Type': 'application/json',\r\n    },\r\n});\r\n\r\n/**\r\n * A service object for handling API requests related to applications.\r\n */\r\nconst applicationService = {\r\n    /**\r\n     * Fetches all applications from the backend.\r\n     * @returns {Promise<Object>} A promise that resolves to the API response.\r\n     */\r\n    getApplications: () => {\r\n        // This assumes an endpoint like /api/applications exists on your server\r\n        return api.get('/applications');\r\n    },\r\n\r\n    /**\r\n     * Approves an application by its ID.\r\n     * @param {string} id - The ID of the application to approve.\r\n     * @returns {Promise<Object>} A promise that resolves to the API response.\r\n     */\r\n    approveApplication: (id) => {\r\n        return api.patch(`/applications/${id}/approve`);\r\n    },\r\n\r\n    /**\r\n     * Rejects an application by its ID.\r\n     * @param {string} id - The ID of the application to reject.\r\n     * @returns {Promise<Object>} A promise that resolves to the API response.\r\n     */\r\n    rejectApplication: (id) => {\r\n        return api.patch(`/applications/${id}/reject`);\r\n    }\r\n};\r\n\r\nexport default applicationService;\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;;AAEzB;AACA,MAAMC,OAAO,GAAG,2BAA2B;;AAE3C;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACrBC,OAAO,EAAEH,OAAO;EAChBI,OAAO,EAAE;IACL,cAAc,EAAE;EACpB;AACJ,CAAC,CAAC;;AAEF;AACA;AACA;AACA,MAAMC,kBAAkB,GAAG;EACvB;AACJ;AACA;AACA;EACIC,eAAe,EAAEA,CAAA,KAAM;IACnB;IACA,OAAOL,GAAG,CAACM,GAAG,CAAC,eAAe,CAAC;EACnC,CAAC;EAED;AACJ;AACA;AACA;AACA;EACIC,kBAAkB,EAAGC,EAAE,IAAK;IACxB,OAAOR,GAAG,CAACS,KAAK,CAAC,iBAAiBD,EAAE,UAAU,CAAC;EACnD,CAAC;EAED;AACJ;AACA;AACA;AACA;EACIE,iBAAiB,EAAGF,EAAE,IAAK;IACvB,OAAOR,GAAG,CAACS,KAAK,CAAC,iBAAiBD,EAAE,SAAS,CAAC;EAClD;AACJ,CAAC;AAED,eAAeJ,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}