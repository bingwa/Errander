{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\user\\\\Desktop\\\\Errand\\\\frontend\\\\src\\\\utils\\\\PrivateRoute.js\",\n  _s = $RefreshSig$();\n// frontend/src/utils/PrivateRoute.js\nimport React, { useContext } from 'react';\nimport { Navigate, Outlet } from 'react-router-dom';\nimport AuthContext from '../context/AuthContext';\nimport { Spinner } from 'react-bootstrap';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PrivateRoute = ({\n  roles\n}) => {\n  _s();\n  const {\n    user,\n    token,\n    loading\n  } = useContext(AuthContext);\n  if (loading) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"d-flex justify-content-center align-items-center\",\n      style: {\n        height: '80vh'\n      },\n      children: /*#__PURE__*/_jsxDEV(Spinner, {\n        animation: \"border\",\n        variant: \"primary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 13,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 13\n    }, this);\n  }\n  if (!token) {\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/login\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 19,\n      columnNumber: 16\n    }, this);\n  }\n\n  // This is a simple role check. 'user' can be true, 'errander' can be true.\n  // If roles are specified, check if the user has one of the required roles.\n  // For now, we are just checking if the user object exists from a valid token.\n  // We will enhance this later if we need more granular roles.\n\n  // A simple check to see if the user is an errander or a regular user\n  const userHasRequiredRole = user && (roles ? roles.includes(user.isErrander ? 'errander' : 'user') : true);\n  if (!userHasRequiredRole) {\n    // Redirect them to a relevant page if they don't have the role\n    // For example, a user trying to access an errander-only page\n    return /*#__PURE__*/_jsxDEV(Navigate, {\n      to: \"/\",\n      replace: true\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 16\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(Outlet, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 12\n  }, this);\n};\n_s(PrivateRoute, \"j/bLGtaAwtJJAm6nX1PegvetBHo=\");\n_c = PrivateRoute;\nexport default PrivateRoute;\nvar _c;\n$RefreshReg$(_c, \"PrivateRoute\");","map":{"version":3,"names":["React","useContext","Navigate","Outlet","AuthContext","Spinner","jsxDEV","_jsxDEV","PrivateRoute","roles","_s","user","token","loading","className","style","height","children","animation","variant","fileName","_jsxFileName","lineNumber","columnNumber","to","replace","userHasRequiredRole","includes","isErrander","_c","$RefreshReg$"],"sources":["C:/Users/user/Desktop/Errand/frontend/src/utils/PrivateRoute.js"],"sourcesContent":["// frontend/src/utils/PrivateRoute.js\r\nimport React, { useContext } from 'react';\r\nimport { Navigate, Outlet } from 'react-router-dom';\r\nimport AuthContext from '../context/AuthContext';\r\nimport { Spinner } from 'react-bootstrap';\r\n\r\nconst PrivateRoute = ({ roles }) => {\r\n    const { user, token, loading } = useContext(AuthContext);\r\n\r\n    if (loading) {\r\n        return (\r\n            <div className=\"d-flex justify-content-center align-items-center\" style={{ height: '80vh' }}>\r\n                <Spinner animation=\"border\" variant=\"primary\" />\r\n            </div>\r\n        );\r\n    }\r\n\r\n    if (!token) {\r\n        return <Navigate to=\"/login\" replace />;\r\n    }\r\n\r\n    // This is a simple role check. 'user' can be true, 'errander' can be true.\r\n    // If roles are specified, check if the user has one of the required roles.\r\n    // For now, we are just checking if the user object exists from a valid token.\r\n    // We will enhance this later if we need more granular roles.\r\n    \r\n    // A simple check to see if the user is an errander or a regular user\r\n    const userHasRequiredRole = user && (roles ? roles.includes(user.isErrander ? 'errander' : 'user') : true);\r\n\r\n    if (!userHasRequiredRole) {\r\n         // Redirect them to a relevant page if they don't have the role\r\n         // For example, a user trying to access an errander-only page\r\n        return <Navigate to=\"/\" replace />;\r\n    }\r\n\r\n\r\n    return <Outlet />;\r\n};\r\n\r\nexport default PrivateRoute;\r\n"],"mappings":";;AAAA;AACA,OAAOA,KAAK,IAAIC,UAAU,QAAQ,OAAO;AACzC,SAASC,QAAQ,EAAEC,MAAM,QAAQ,kBAAkB;AACnD,OAAOC,WAAW,MAAM,wBAAwB;AAChD,SAASC,OAAO,QAAQ,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE1C,MAAMC,YAAY,GAAGA,CAAC;EAAEC;AAAM,CAAC,KAAK;EAAAC,EAAA;EAChC,MAAM;IAAEC,IAAI;IAAEC,KAAK;IAAEC;EAAQ,CAAC,GAAGZ,UAAU,CAACG,WAAW,CAAC;EAExD,IAAIS,OAAO,EAAE;IACT,oBACIN,OAAA;MAAKO,SAAS,EAAC,kDAAkD;MAACC,KAAK,EAAE;QAAEC,MAAM,EAAE;MAAO,CAAE;MAAAC,QAAA,eACxFV,OAAA,CAACF,OAAO;QAACa,SAAS,EAAC,QAAQ;QAACC,OAAO,EAAC;MAAS;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE;IAAC;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC/C,CAAC;EAEd;EAEA,IAAI,CAACX,KAAK,EAAE;IACR,oBAAOL,OAAA,CAACL,QAAQ;MAACsB,EAAE,EAAC,QAAQ;MAACC,OAAO;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAC3C;;EAEA;EACA;EACA;EACA;;EAEA;EACA,MAAMG,mBAAmB,GAAGf,IAAI,KAAKF,KAAK,GAAGA,KAAK,CAACkB,QAAQ,CAAChB,IAAI,CAACiB,UAAU,GAAG,UAAU,GAAG,MAAM,CAAC,GAAG,IAAI,CAAC;EAE1G,IAAI,CAACF,mBAAmB,EAAE;IACrB;IACA;IACD,oBAAOnB,OAAA,CAACL,QAAQ;MAACsB,EAAE,EAAC,GAAG;MAACC,OAAO;IAAA;MAAAL,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EACtC;EAGA,oBAAOhB,OAAA,CAACJ,MAAM;IAAAiB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AACrB,CAAC;AAACb,EAAA,CA/BIF,YAAY;AAAAqB,EAAA,GAAZrB,YAAY;AAiClB,eAAeA,YAAY;AAAC,IAAAqB,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}